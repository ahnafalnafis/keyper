#!/usr/bin/env python

import json
import os
from os.path import dirname, join, exists
import random
import sys

import dotenv

# Loading environment variables from .env file.
DOTENV_PATH = join(dirname(__file__), ".env")
dotenv.load_dotenv(DOTENV_PATH)

# Environment variables:
DATABASE = os.environ.get("DATABASE")
MASTER_KEY = os.environ.get("MASTER_KEY")


def load_json(file, mode, callback, encoding="utf-8") -> None:
    """
    Loads the JSON file. If the JSON file doesn't exist then it creates a new
    one.
    """
    if not exists(file):
        with open(file, "x", encoding=encoding) as handler:
            handler.close()

    with open(file=file, mode=mode, encoding=encoding) as handler:
        callback(handler)


def readDB() -> str:
    """Reads the database"""
    # with open(DATABASE, "r", encoding="utf-8") as handler:
    #     return json.load(handler)

    def callback() -> None: ...

    load_json(DATABASE, "r", callback)


def writeDB(content: None) -> None:
    """Writes to the database"""
    with open(DATABASE, "w", encoding="utf-8") as handler:
        json.dump(content, handler)


def generate_UID(size: int) -> str:
    """Generates a unique ID"""
    uid = ""
    size = abs(size) + 1 if size == 0 else abs(size)

    while len(uid) <= 10:
        uid += str(random.choice(range(size * 10)))
    return uid


def empty(data) -> bool:
    """Determines whether given data is empty or not."""
    return data is None


def create_new() -> None:
    """Creates a new password data"""

    data = readDB()
    app_name = username = password = None

    while empty(app_name):
        app_name = input("App name: ")
        if empty(app_name):
            print("Any placeholder should not be empty.")

    while empty(username):
        username = input("User name: ")
        if empty(username):
            print("Any placeholder should not be empty.")

    while empty(password):
        password = input("Password: ")
        if empty(password):
            print("Any placeholder should not be empty.")

    UID = generate_UID(len(data))
    data[UID] = {
        "app_name": app_name,
        "username": username,
        "password": password
    }

    print("Password saved.")
    writeDB(data)


def main() -> None:
    arguments = sys.argv[1:]

    if sys.argv[0] in ["python", "python3", "py"]:
        arguments = sys.argv[2:]

    if len(arguments) == 0:
        print("Expected at least 1 argument, got 0")
        sys.exit(1)

    # Handles the arguments.
    command = arguments[0]

    if command == "create":
        create_new()
    else:
        print(f"Command not found: {command}")


try:
    # User authentication
    user_key = input("Master key: ")

    if user_key == MASTER_KEY:
        main()
        sys.exit(0)

    print("Sorry, incorrect password.")
    sys.exit(1)

except KeyboardInterrupt:
    print("\n", "User aborted!!")

except Exception as error:
    print(error)
